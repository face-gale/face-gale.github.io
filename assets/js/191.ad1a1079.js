(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{535:function(a,t,s){"use strict";s.r(t);var n=s(42),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java-对象和类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-对象和类"}},[a._v("#")]),a._v(" Java 对象和类")]),a._v(" "),s("p",[a._v("Java作为一种面向对象语言。支持以下基本概念：")]),a._v(" "),s("ul",[s("li",[a._v("多态")]),a._v(" "),s("li",[a._v("继承")]),a._v(" "),s("li",[a._v("封装")]),a._v(" "),s("li",[a._v("抽象")]),a._v(" "),s("li",[a._v("类")]),a._v(" "),s("li",[a._v("对象")]),a._v(" "),s("li",[a._v("实例")]),a._v(" "),s("li",[a._v("方法")]),a._v(" "),s("li",[a._v("消息解析")])]),a._v(" "),s("h2",{attrs:{id:"java中的对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java中的对象"}},[a._v("#")]),a._v(" Java中的对象")]),a._v(" "),s("p",[a._v("现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。")]),a._v(" "),s("p",[a._v("拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。")]),a._v(" "),s("p",[a._v("对比现实对象和软件对象，它们之间十分相似。")]),a._v(" "),s("p",[a._v("软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。")]),a._v(" "),s("p",[a._v("在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。")]),a._v(" "),s("h2",{attrs:{id:"java中的类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java中的类"}},[a._v("#")]),a._v(" Java中的类")]),a._v(" "),s("p",[a._v("类可以看成是创建Java对象的模板。")]),a._v(" "),s("p",[a._v("通过下面一个简单的类来理解下Java中类的定义：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" breed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("barking")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hungry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleeping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("一个类可以包含以下类型变量：")]),a._v(" "),s("ul",[s("li",[a._v("局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。")]),a._v(" "),s("li",[a._v("成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。")]),a._v(" "),s("li",[a._v("类变量：类变量也声明在类中，方法体之外，但必须声明为static类型。")])])]),a._v(" "),s("p",[a._v("一个类可以拥有多个方法，在上面的例子中："),s("code",[a._v("barking()")]),a._v("、"),s("code",[a._v("hungry()")]),a._v("和"),s("code",[a._v("sleeping()")]),a._v("都是Dog类的方法。")]),a._v(" "),s("h2",{attrs:{id:"构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[a._v("#")]),a._v(" 构造方法")]),a._v(" "),s("p",[a._v("每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。")]),a._v(" "),s("p",[a._v("在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。")]),a._v(" "),s("p",[a._v("下面是一个构造方法示例：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Puppy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Puppy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Puppy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这个构造器仅有一个参数：name")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"创建对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建对象"}},[a._v("#")]),a._v(" 创建对象")]),a._v(" "),s("p",[a._v("对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：")]),a._v(" "),s("ul",[s("li",[a._v("声明：声明一个对象，包括对象名称和对象类型。")]),a._v(" "),s("li",[a._v("实例化：使用关键字new来创建一个对象。")]),a._v(" "),s("li",[a._v("初始化：使用new创建对象时，会调用构造方法初始化对象。\n下面是一个创建对象的例子：")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Puppy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Puppy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//这个构造器仅有一个参数：name")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Passed Name is :"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 下面的语句将创建一个Puppy对象")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Puppy")]),a._v(" myPuppy "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Puppy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"tommy"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("编译并运行上面的程序，会打印出下面的结果：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Passed Name is :tommy\n")])])]),s("h2",{attrs:{id:"访问实例变量和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问实例变量和方法"}},[a._v("#")]),a._v(" 访问实例变量和方法")]),a._v(" "),s("p",[a._v("通过已创建的对象来访问成员变量和成员方法，如下所示：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("/* 实例化对象 */\nObjectReference = new Constructor();\n/* 访问其中的变量 */\nObjectReference.variableName;\n/* 访问类中的方法 */\nObjectReference.MethodName();\n")])])]),s("h2",{attrs:{id:"源文件声明规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源文件声明规则"}},[a._v("#")]),a._v(" 源文件声明规则")]),a._v(" "),s("p",[a._v("当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。")]),a._v(" "),s("ul",[s("li",[a._v("一个源文件中只能有一个public类")]),a._v(" "),s("li",[a._v("一个源文件可以有多个非public类")]),a._v(" "),s("li",[a._v("源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。")]),a._v(" "),s("li",[a._v("如果一个类定义在某个包中，那么package语句应该在源文件的首行。")]),a._v(" "),s("li",[a._v("如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。")]),a._v(" "),s("li",[a._v("import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。")]),a._v(" "),s("li",[a._v("类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。")])]),a._v(" "),s("p",[a._v("除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。")]),a._v(" "),s("h2",{attrs:{id:"import语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import语句"}},[a._v("#")]),a._v(" Import语句")]),a._v(" "),s("p",[a._v("在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。")]),a._v(" "),s("p",[a._v("例如，下面的命令行将会命令编译器载入"),s("code",[a._v("java_installation/java/io")]),a._v("路径下的所有类")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("import java.io.*;\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);