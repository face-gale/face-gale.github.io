(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{356:function(v,_,t){"use strict";t.r(_);var n=t(42),s=Object(n.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),t("h2",{attrs:{id:"数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[v._v("#")]),v._v(" 数据结构")]),v._v(" "),t("p",[t("strong",[v._v("什么是数据结构")])]),v._v(" "),t("p",[v._v("数据结构是数据的组织、管理和存储格式，其使用目的是为了高效的访问和修改数据。")]),v._v(" "),t("p",[v._v("数据结构是算法的基石。如果把算法比喻成美丽灵动的舞者，那么数据结构就是舞者脚下广阔而坚实的舞台。")]),v._v(" "),t("p",[t("strong",[v._v("物理结构和逻辑结构的区别？")])]),v._v(" "),t("p",[v._v("物理结构就像人的血肉和骨骼，看得见，摸得着，实实在在，如数组、链表。")]),v._v(" "),t("p",[v._v("逻辑结构就像人的思想和精神，它们看不见、摸不着，如队列、栈、树、图。")]),v._v(" "),t("p",[t("strong",[v._v("线性存储结构和非线性存储结构的区别？")])]),v._v(" "),t("p",[v._v("线性：元素之间的关系是一对一的，如栈、队列。")]),v._v(" "),t("p",[v._v("非线性：每个元素可能连接0或多个元素，如树、图。")]),v._v(" "),t("h2",{attrs:{id:"算法基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法基础"}},[v._v("#")]),v._v(" 算法基础")]),v._v(" "),t("p",[t("strong",[v._v("什么是算法？")])]),v._v(" "),t("p",[v._v("数学：算法是用于解决某一类问题的公式和思想。")]),v._v(" "),t("p",[v._v("计算机：一系列程序指令，用于解决特定的运算和逻辑问题。")]),v._v(" "),t("p",[v._v("算法"),t("strong",[v._v("原地工作")]),v._v(" -- 算法所需内存空间为常量")]),v._v(" "),t("p",[t("strong",[v._v("如何衡量算法好坏？")])]),v._v(" "),t("p",[v._v("时间复杂度：运行时间长短。空间复杂度：占用内存大小。")]),v._v(" "),t("p",[t("strong",[v._v("怎么计算时间复杂度？")])]),v._v(" "),t("p",[v._v("大O表示法（渐进时间复杂度）：把程序的相对执行时间函数T(n)简化为一个数量级，这个数量级可以是n、n^2、logN等。")]),v._v(" "),t("p",[v._v("推导时间复杂度的几个原则：\n如果运行时间是常数量级，则用常数1表示。只保留时间函数中的最高阶项。如果最高阶项存在，则省去最高项前面的系数。")]),v._v(" "),t("p",[v._v("时间复杂度对比：O(1) > O(logn) > O(n) > O(nlogn) > O(n^2)。")])])}),[],!1,null,null,null);_.default=s.exports}}]);