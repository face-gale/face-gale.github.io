(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{494:function(t,a,r){"use strict";r.r(a);var s=r(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"什么是spring-aop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring-aop"}},[t._v("#")]),t._v(" 什么是Spring AOP")]),t._v(" "),r("h2",{attrs:{id:"概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),r("p",[t._v("面向切面编程，在我们的应用中，经常需要做一些事情，但是这些事情与核心业务无关，比如，要记录所有 update 方法的执行时间时间，操作人等等信息，记录到日志， 通过 Spring 的 AOP 技术，就可以在不修改 update 的代码的情况下完成该需求。")]),t._v(" "),r("h2",{attrs:{id:"spring-aop-实现原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-实现原理"}},[t._v("#")]),t._v(" Spring AOP 实现原理")]),t._v(" "),r("p",[t._v("Spring AOP 中的动态代理主要有两种方式，"),r("strong",[t._v("JDK 动态代理")]),t._v(" 和 "),r("strong",[t._v("CGLIB 动态代理")]),t._v("。JDK 动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK 动态代理的核心是 "),r("code",[t._v("InvocationHandler")]),t._v(" 接口和 "),r("code",[t._v("Proxy")]),t._v(" 类。")]),t._v(" "),r("p",[t._v("如果目标类没有实现接口，那么 Spring AOP 会选择使用 CGLIB 来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB 是通过继承的方式做的动态代理，因此如果某个类被标记为 final，那么它是无法使用 CGLIB 做动态代理的。")]),t._v(" "),r("h2",{attrs:{id:"动态代理（cglib-与-jdk）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态代理（cglib-与-jdk）"}},[t._v("#")]),t._v(" 动态代理（CGLIB 与 JDK）")]),t._v(" "),r("p",[t._v("JDK 动态代理类和委托类需要都实现同一个接口。也就是说只有实现了某个接口的类可以使用 Java 动态代理机制。但是，事实上使用中并不是遇到的所有类都会给你实现一个接口。因此，对于没有实现接口的类，就不能使用该机制。而 CGLIB 则可以实现对类的动态代理。")])])}),[],!1,null,null,null);a.default=n.exports}}]);