(window.webpackJsonp=window.webpackJsonp||[]).push([[240],{587:function(e,t,n){"use strict";n.r(t);var s=n(42),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"kubernetes-安装集群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-安装集群"}},[e._v("#")]),e._v(" Kubernetes 安装集群")]),e._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),n("p",[e._v("kubeadm 是 kubernetes 的集群安装工具，能够快速安装 kubernetes 集群，安装 kubernetes 主要是安装它的各个镜像，而 kubeadm 已经为我们集成好了运行 kubernetes 所需的基本镜像。但由于国内的网络原因，在搭建环境时，无法拉取到这些镜像。此时我们只需要修改为阿里云提供的镜像服务即可解决该问题。")]),e._v(" "),n("h2",{attrs:{id:"创建并修改配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建并修改配置"}},[e._v("#")]),e._v(" 创建并修改配置")]),e._v(" "),n("p",[e._v("创建并进入目录："),n("code",[e._v("root@kubernetes-master:/usr/local/kubernetes/cluster#")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# 导出配置文件\nkubeadm config print init-defaults --kubeconfig ClusterConfiguration > kubeadm.yml\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("修改配置：")]),e._v(" "),n("ol",[n("li",[e._v("将"),n("code",[e._v("advertiseAddress")]),e._v("改成自己的地址 "),n("code",[e._v("192.168.27.110")])]),e._v(" "),n("li",[e._v("将镜像仓库改为阿里云"),n("code",[e._v("imageRepository: registry.aliyuncs.com/google_containers")])]),e._v(" "),n("li",[e._v("在networking下增加"),n("code",[e._v('podSubnet: "10.244.0.0/16"')])]),e._v(" "),n("li",[e._v("确认版本正确，否则可能阻塞。")])])]),e._v(" "),n("p",[e._v("尤其注意在修改时不能多加空格或者tab，因为yml的格式是很严格的，多了就会产生错误。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('apiVersion: kubeadm.k8s.io/v1beta2\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  # 修改为主节点 IP\n  advertiseAddress: 192.168.27.110\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  name: kubernetes-master\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta2\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrollerManager: {}\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\n# 国内不能访问 Google，修改为阿里云\nimageRepository: registry.aliyuncs.com/google_containers\nkind: ClusterConfiguration\n# 修改版本号\nkubernetesVersion: v1.16.0\nnetworking:\n  dnsDomain: cluster.local\n  # 配置 POD 所在网段为我们虚拟机不重叠的网段（这里用的是 Flannel 默认网段）\n  podSubnet: "10.244.0.0/16"\n  serviceSubnet: 10.96.0.0/12\nscheduler: {}\n')])])]),n("h2",{attrs:{id:"查看所需镜像"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查看所需镜像"}},[e._v("#")]),e._v(" 查看所需镜像")]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[e._v("kubeadm config images list --config kubeadm.yml\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 输出如下")]),e._v("\nregistry.aliyuncs.com/google_containers/kube-apiserver:v1.15.0\nregistry.aliyuncs.com/google_containers/kube-controller-manager:v1.15.0\nregistry.aliyuncs.com/google_containers/kube-scheduler:v1.15.0\nregistry.aliyuncs.com/google_containers/kube-proxy:v1.15.0\nregistry.aliyuncs.com/google_containers/pause:3.1\nregistry.aliyuncs.com/google_containers/etcd:3.3.10\nregistry.aliyuncs.com/google_containers/coredns:1.3.1\n")])])]),n("h2",{attrs:{id:"拉取所需镜像"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拉取所需镜像"}},[e._v("#")]),e._v(" 拉取所需镜像")]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[e._v("kubeadm config images pull --config kubeadm.yml\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 输出如下")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("config/images"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Pulled registry.aliyuncs.com/google_containers/kube-apiserver:v1.15.0\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("config/images"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Pulled registry.aliyuncs.com/google_containers/kube-controller-manager:v1.15.0\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("config/images"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Pulled registry.aliyuncs.com/google_containers/kube-scheduler:v1.15.0\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("config/images"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Pulled registry.aliyuncs.com/google_containers/kube-proxy:v1.15.0\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("config/images"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Pulled registry.aliyuncs.com/google_containers/pause:3.1\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("config/images"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Pulled registry.aliyuncs.com/google_containers/etcd:3.3.10\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("config/images"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Pulled registry.aliyuncs.com/google_containers/coredns:1.3.1\n")])])]),n("h2",{attrs:{id:"安装主节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装主节点"}},[e._v("#")]),e._v(" 安装主节点")]),e._v(" "),n("p",[e._v("执行以下命令初始化主节点，该命令指定了初始化时需要使用的配置文件，其中添加 --upload-certs 参数可以在后续执行加入节点时自动分发证书文件。追加的 "),n("code",[e._v("tee kubeadm-init.log")]),e._v(" 用以输出日志。")]),e._v(" "),n("blockquote",[n("p",[e._v("注意： 如果安装 kubernetes 版本和下载的镜像版本不统一则会出现 timed out waiting for the condition 错误。中途失败或是想修改配置可以使用 kubeadm reset 命令重置配置，再做初始化操作即可。")])]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[e._v("kubeadm init --config"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("kubeadm.yml --upload-certs "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" kubeadm-init.log\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 输出如下")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING IsDockerSystemdCheck"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": detected "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cgroupfs"')]),e._v(" as the Docker cgroup driver. The recommended driver is "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"systemd"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" Please follow the guide at https://kubernetes.io/docs/setup/cri/\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Pulling images required "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" setting up a Kubernetes cluster\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" This might take a minute or two, depending on the speed of your internet connection\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\nYour Kubernetes control-plane has initialized successfully"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\nTo start using your cluster, you need to run the following as a regular user:\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),n("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" -i /etc/kubernetes/admin.conf "),n("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube/config\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -u"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -g"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube/config\nYou should now deploy a pod network to the cluster.\nRun "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"kubectl apply -f [podnetwork].yaml"')]),e._v(" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\nThen you can "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" any number of worker nodes by running the following on each as root:\nkubeadm "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".141.110:6443 --token abcdef.0123456789abcdef "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --discovery-token-ca-cert-hash sha256:f0759e0d352c1a5de4444782b4a676460b2ea7a2876fa0accab572b8629b72c8 \n")])])]),n("h2",{attrs:{id:"配置-kubectl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置-kubectl"}},[e._v("#")]),e._v(" 配置 kubectl")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mkdir -p $HOME/.kube\ncp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n# 非 ROOT 用户执行\nchown $(id -u):$(id -g) $HOME/.kube/config\n")])])]),n("h2",{attrs:{id:"验证是否成功"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#验证是否成功"}},[e._v("#")]),e._v(" 验证是否成功")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl get node\n# 输出如下\nNAME                STATUS     ROLES    AGE     VERSION\nkubernetes-master   NotReady   master   4m38s   v1.15.0\n")])])]),n("h2",{attrs:{id:"安装从节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装从节点"}},[e._v("#")]),e._v(" 安装从节点")]),e._v(" "),n("p",[e._v("将 Node 节点加入到集群中很简单，只需要在 Node 服务器上安装 kubeadm，kubectl，kubelet 三个工具，然后使用 kubeadm join 命令加入即可")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubeadm join 192.168.27.110:6443 --token abcdef.0123456789abcdef \\\n    --discovery-token-ca-cert-hash sha256:dd022a2ea768459142d5ef881e4da44d6aaaf3379538ef48516cd88ca1857dd2 \n")])])]),n("h2",{attrs:{id:"验证是否成功-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#验证是否成功-2"}},[e._v("#")]),e._v(" 验证是否成功")]),e._v(" "),n("p",[e._v("回到 Master 主节点查看是否安装成功")]),e._v(" "),n("blockquote",[n("p",[e._v("注意： 如果 Node 节点加入 Master 时配置有问题可以在 Node 节点上使用 "),n("code",[e._v("kubeadm reset")]),e._v(" 重置配置再使用 "),n("code",[e._v("kubeadm join")]),e._v(" 命令重新加入即可。希望在 master 节点删除 node ，可以使用 "),n("code",[e._v("kubectl delete nodes <NAME>")]),e._v(" 删除。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl get node\n# 输出如下\nNAME                 STATUS     ROLES    AGE   VERSION\nkubernetes-master    NotReady   master   20m   v1.15.0\nkubernetes-node-01   NotReady   <none>   16s   v1.15.0\nkubernetes-node-02   NotReady   <none>   6s    v1.15.0\n")])])]),n("h2",{attrs:{id:"查看-pod-状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查看-pod-状态"}},[e._v("#")]),e._v(" 查看 Pod 状态")]),e._v(" "),n("p",[e._v("coredns 尚未运行，此时我们还需要安装网络插件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl get pod -n kube-system -o wide\n# 输出如下\nNAME                                        READY   STATUS    RESTARTS   AGE     IP                NODE                 NOMINATED NODE   READINESS GATES\ncoredns-bccdc95cf-9s4bm                     0/1     Pending   0          24m     <none>            <none>               <none>           <none>\ncoredns-bccdc95cf-s8ggd                     0/1     Pending   0          24m     <none>            <none>               <none>           <none>\netcd-kubernetes-master                      1/1     Running   0          24m     192.168.141.110   kubernetes-master    <none>           <none>\nkube-apiserver-kubernetes-master            1/1     Running   0          24m     192.168.141.110   kubernetes-master    <none>           <none>\nkube-controller-manager-kubernetes-master   1/1     Running   0          23m     192.168.141.110   kubernetes-master    <none>           <none>\nkube-proxy-8s87d                            1/1     Running   0          4m56s   192.168.141.120   kubernetes-node-01   <none>           <none>\nkube-proxy-cbnlb                            1/1     Running   0          4m46s   192.168.141.121   kubernetes-node-02   <none>           <none>\nkube-proxy-vwhxj                            1/1     Running   0          24m     192.168.141.110   kubernetes-master    <none>           <none>\nkube-scheduler-kubernetes-master            1/1     Running   0          24m     192.168.141.110   kubernetes-master    <none>           <none>\n")])])]),n("h2",{attrs:{id:"附：扩展阅读"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#附：扩展阅读"}},[e._v("#")]),e._v(" 附：扩展阅读")]),e._v(" "),n("h3",{attrs:{id:"kubeadm-init-的执行过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#kubeadm-init-的执行过程"}},[e._v("#")]),e._v(" kubeadm init 的执行过程")]),e._v(" "),n("ul",[n("li",[e._v("init： 指定版本进行初始化操作")]),e._v(" "),n("li",[e._v("preflight： 初始化前的检查和下载所需要的 Docker 镜像文件")]),e._v(" "),n("li",[e._v("kubelet-start： 生成 kubelet 的配置文件 var/lib/kubelet/config.yaml，没有这个文件 kubelet 无法启动，所以初始化之前的 kubelet 实际上启动不会成功")]),e._v(" "),n("li",[e._v("certificates： 生成 Kubernetes 使用的证书，存放在 /etc/kubernetes/pki 目录中")]),e._v(" "),n("li",[e._v("kubeconfig： 生成 KubeConfig 文件，存放在 /etc/kubernetes 目录中，组件之间通信需要使用对应文件")]),e._v(" "),n("li",[e._v("control-plane： 使用 /etc/kubernetes/manifest 目录下的 YAML 文件，安装 Master 组件")]),e._v(" "),n("li",[e._v("etcd： 使用 /etc/kubernetes/manifest/etcd.yaml 安装 Etcd 服务")]),e._v(" "),n("li",[e._v("wait-control-plane： 等待 control-plan 部署的 Master 组件启动")]),e._v(" "),n("li",[e._v("apiclient： 检查 Master 组件服务状态。")]),e._v(" "),n("li",[e._v("uploadconfig： 更新配置")]),e._v(" "),n("li",[e._v("kubelet： 使用 configMap 配置 kubelet")]),e._v(" "),n("li",[e._v("patchnode： 更新 CNI 信息到 Node 上，通过注释的方式记录")]),e._v(" "),n("li",[e._v("mark-control-plane： 为当前节点打标签，打了角色 Master，和不可调度标签，这样默认就不会使用 Master 节点来运行 Pod")]),e._v(" "),n("li",[e._v("bootstrap-token： 生成 token 记录下来，后边使用 kubeadm join 往集群中添加节点时会用到")]),e._v(" "),n("li",[e._v("addons： 安装附加组件 CoreDNS 和 kube-proxy")])])])}),[],!1,null,null,null);t.default=a.exports}}]);