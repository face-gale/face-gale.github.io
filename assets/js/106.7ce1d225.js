(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{454:function(e,t,o){"use strict";o.r(t);var v=o(42),_=Object(v.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"netty-线程模型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#netty-线程模型"}},[e._v("#")]),e._v(" Netty 线程模型")]),e._v(" "),o("p",[e._v("首先，"),o("code",[e._v("Netty")]),e._v(" 使用 "),o("code",[e._v("EventLoop")]),e._v(" 来处理连接上的读写事件，而一个连接上的所有请求都保证在一个 "),o("code",[e._v("EventLoop")]),e._v(" 中被处理，一个 "),o("code",[e._v("EventLoop")]),e._v(" 中只有一个 "),o("code",[e._v("Thread")]),e._v("，所以也就实现了一个连接上的所有事件只会在一个线程中被执行。一个 "),o("code",[e._v("EventLoopGroup")]),e._v(" 包含多个 "),o("code",[e._v("EventLoop")]),e._v("，可以把一个 "),o("code",[e._v("EventLoop")]),e._v(" 当做是 "),o("code",[e._v("Reactor")]),e._v(" 线程模型中的一个线程，而一个 "),o("code",[e._v("EventLoopGroup")]),e._v(" 类似于一个 "),o("code",[e._v("ExecutorService")])])])}),[],!1,null,null,null);t.default=_.exports}}]);