(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{595:function(e,n,t){"use strict";t.r(n);var s=t(42),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"nginx-ingress-controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-ingress-controller"}},[e._v("#")]),e._v(" Nginx Ingress Controller")]),e._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[e._v("本次实践的主要目的就是将入口统一，不再通过 LoadBalancer 等方式将端口暴露出来，而是使用 Ingress 提供的反向代理负载均衡功能作为我们的唯一入口。通过以下步骤操作仔细体会。")]),e._v(" "),t("p",[e._v("注意： 下面包含资源配置的步骤都是自行创建 YAML 配置文件通过 "),t("code",[e._v("kubectl create -f <YAML>")]),e._v(" 或 "),t("code",[e._v("kubectl apply -f <YAML>")]),e._v(" 部署，"),t("code",[e._v("kubectl delete -f <YAML>")]),e._v(" 删除")]),e._v(" "),t("h2",{attrs:{id:"安装-ingress"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-ingress"}},[e._v("#")]),e._v(" 安装 Ingress")]),e._v(" "),t("p",[e._v("Ingress Controller 有许多种，我们选择最熟悉的 Nginx 来处理请求，其它可以参考 官方文档")]),e._v(" "),t("ul",[t("li",[e._v("下载 Nginx Ingress Controller 配置文件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml\n")])])]),t("p",[e._v("修改配置文件，找到配置如下位置 (搜索 serviceAccountName) 在下面增加一句 hostNetwork: true")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-ingress-controller\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nspec:\n  # 可以部署多个实例\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: ingress-nginx\n      app.kubernetes.io/part-of: ingress-nginx\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/part-of: ingress-nginx\n      annotations:\n        prometheus.io/port: "10254"\n        prometheus.io/scrape: "true"\n    spec:\n      serviceAccountName: nginx-ingress-serviceaccount\n      # 增加 hostNetwork: true，意思是开启主机网络模式，暴露 Nginx 服务端口 80\n      hostNetwork: true\n      containers:\n        - name: nginx-ingress-controller\n          # 使用 Azure 中国镜像\n          image: quay.azk8s.cn/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1\n          args:\n            - /nginx-ingress-controller\n            - --configmap=$(POD_NAMESPACE)/nginx-configuration\n            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services\n            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services\n            - --publish-service=$(POD_NAMESPACE)/ingress-nginx\n// 以下代码省略...\n')])])]),t("ul",[t("li",[e._v("通过命令 kubectl apply -f mandatory.yaml 部署")]),e._v(" "),t("li",[e._v("通过命令 kubectl get pods -n ingress-nginx -o wide 查看")])]),e._v(" "),t("h2",{attrs:{id:"部署-ingress"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署-ingress"}},[e._v("#")]),e._v(" 部署 Ingress")]),e._v(" "),t("ul",[t("li",[e._v("创建一个名为 ingress.yml 的资源配置文件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('apiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  name: nginx-web\n  annotations:\n    # 指定 Ingress Controller 的类型\n    kubernetes.io/ingress.class: "nginx"\n    # 指定我们的 rules 的 path 可以使用正则表达式\n    nginx.ingress.kubernetes.io/use-regex: "true"\n    # 连接超时时间，默认为 5s\n    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"\n    # 后端服务器回转数据超时时间，默认为 60s\n    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"\n    # 后端服务器响应超时时间，默认为 60s\n    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"\n    # 客户端上传文件，最大大小，默认为 20m\n    nginx.ingress.kubernetes.io/proxy-body-size: "10m"\n    # URL 重写\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  # 路由规则\n  rules:\n  # 主机名，只能是域名，修改为你自己的\n  - host: k8s.funtl.com\n    http:\n      paths:\n      - path:\n        backend:\n          # 后台部署的 Service Name\n          serviceName: tomcat-http\n          # 后台部署的 Service Port\n          servicePort: 8080\n')])])]),t("ul",[t("li",[e._v("通过命令 kubectl apply -f ingress.yml 部署")]),e._v(" "),t("li",[e._v("通过命令 kubectl get ingress 查看")])]),e._v(" "),t("h2",{attrs:{id:"部署-tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署-tomcat"}},[e._v("#")]),e._v(" 部署 Tomcat")]),e._v(" "),t("p",[e._v("部署 Tomcat 但仅允许在内网访问，我们要通过 Ingress 提供的反向代理功能路由到 Tomcat 之上，创建一个名为 tomcat.yml 资源配置文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: tomcat-app\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        name: tomcat\n    spec:\n      containers:\n      - name: tomcat\n        image: tomcat:8.5.43\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: tomcat-http\nspec:\n  ports:\n    - port: 8080\n      targetPort: 8080\n  # ClusterIP, NodePort, LoadBalancer\n  type: ClusterIP\n  selector:\n    name: tomcat\n")])])]),t("ul",[t("li",[e._v("通过命令 "),t("code",[e._v("kubectl apply -f tomcat.yml")]),e._v(" 部署")])]),e._v(" "),t("h2",{attrs:{id:"验证是否成功"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证是否成功"}},[e._v("#")]),e._v(" 验证是否成功")]),e._v(" "),t("h3",{attrs:{id:"查看-tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看-tomcat"}},[e._v("#")]),e._v(" 查看 Tomcat")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl get deployment\n# 输出如下\nNAME         READY   UP-TO-DATE   AVAILABLE   AGE\ntomcat-app   2/2     2            2           88m\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl get service\n# 输出如下\nNAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nkubernetes    ClusterIP   10.96.0.1       <none>        443/TCP    2d5h\ntomcat-http   ClusterIP   10.97.222.179   <none>        8080/TCP   89m\n")])])]),t("h3",{attrs:{id:"查看-ingress"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看-ingress"}},[e._v("#")]),e._v(" 查看 Ingress")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl get pods -n ingress-nginx -o wide\n# 输出如下，注意下面的 IP 地址，就是我们实际访问地址\nNAME                                        READY   STATUS    RESTARTS   AGE   IP                NODE                 NOMINATED NODE   READINESS GATES\nnginx-ingress-controller-76f9fddcf8-vzkm5   1/1     Running   0          61m   192.168.141.121   kubernetes-node-02   <none>           <none>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl get ingress\n# 输出如下\nNAME        HOSTS          ADDRESS   PORTS   AGE\nnginx-web   k8s.funtl.com             80      61m\n")])])]),t("h3",{attrs:{id:"测试访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试访问"}},[e._v("#")]),e._v(" 测试访问")]),e._v(" "),t("p",[e._v("成功代理到 Tomcat 即表示成功")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 不设置 Hosts 的方式请求地址，下面的 IP 和 HOST 均在上面有配置\ncurl -v http://192.168.141.121 -H 'host: k8s.funtl.com'\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);